package dcp031

import "testing"

func TestLevenshtein(t *testing.T) {
	var tests = []struct {
		s, t string
		n    int
	}{
		{"kitten", "sitting", 3},
		{"kitten", "winter", 3},
		{"kitten", "whiner", 5},
		{"kitten", "known", 4},
		{"kitten", "unknown", 6},
		{"kitten", "curb", 6},
		{"kitten", "rap", 6},
		{"kitten", "the quick brown fox", 17},
		{"kitten", "the slow brown fox", 17},
		{"sitting", "kitten", 3},
		{"sitting", "winter", 5},
		{"sitting", "whiner", 6},
		{"sitting", "known", 6},
		{"sitting", "unknown", 7},
		{"sitting", "curb", 7},
		{"sitting", "rap", 7},
		{"sitting", "the quick brown fox", 17},
		{"sitting", "the slow brown fox", 16},
		{"winter", "kitten", 3},
		{"winter", "sitting", 5},
		{"winter", "whiner", 2},
		{"winter", "known", 5},
		{"winter", "unknown", 6},
		{"winter", "curb", 6},
		{"winter", "rap", 6},
		{"winter", "the quick brown fox", 17},
		{"winter", "the slow brown fox", 16},
		{"whiner", "kitten", 5},
		{"whiner", "sitting", 6},
		{"whiner", "winter", 2},
		{"whiner", "known", 6},
		{"whiner", "unknown", 6},
		{"whiner", "curb", 6},
		{"whiner", "rap", 6},
		{"whiner", "the quick brown fox", 16},
		{"whiner", "the slow brown fox", 16},
		{"known", "kitten", 4},
		{"known", "sitting", 6},
		{"known", "winter", 5},
		{"known", "whiner", 6},
		{"known", "unknown", 2},
		{"known", "curb", 5},
		{"known", "rap", 5},
		{"known", "the quick brown fox", 15},
		{"known", "the slow brown fox", 15},
		{"unknown", "kitten", 6},
		{"unknown", "sitting", 7},
		{"unknown", "winter", 6},
		{"unknown", "whiner", 6},
		{"unknown", "known", 2},
		{"unknown", "curb", 7},
		{"unknown", "rap", 7},
		{"unknown", "the quick brown fox", 14},
		{"unknown", "the slow brown fox", 15},
		{"curb", "kitten", 6},
		{"curb", "sitting", 7},
		{"curb", "winter", 6},
		{"curb", "whiner", 6},
		{"curb", "known", 5},
		{"curb", "unknown", 7},
		{"curb", "rap", 4},
		{"curb", "the quick brown fox", 17},
		{"curb", "the slow brown fox", 17},
		{"rap", "kitten", 6},
		{"rap", "sitting", 7},
		{"rap", "winter", 6},
		{"rap", "whiner", 6},
		{"rap", "known", 5},
		{"rap", "unknown", 7},
		{"rap", "curb", 4},
		{"rap", "the quick brown fox", 18},
		{"rap", "the slow brown fox", 17},
		{"the quick brown fox", "kitten", 17},
		{"the quick brown fox", "sitting", 17},
		{"the quick brown fox", "winter", 17},
		{"the quick brown fox", "whiner", 16},
		{"the quick brown fox", "known", 15},
		{"the quick brown fox", "unknown", 14},
		{"the quick brown fox", "curb", 17},
		{"the quick brown fox", "rap", 18},
		{"the quick brown fox", "the slow brown fox", 5},
		{"the slow brown fox", "kitten", 17},
		{"the slow brown fox", "sitting", 16},
		{"the slow brown fox", "winter", 16},
		{"the slow brown fox", "whiner", 16},
		{"the slow brown fox", "known", 15},
		{"the slow brown fox", "unknown", 15},
		{"the slow brown fox", "curb", 17},
		{"the slow brown fox", "rap", 17},
		{"the slow brown fox", "the quick brown fox", 5},
	}
	for _, tt := range tests {
		n := levenshtein(tt.s, tt.t)
		if n != tt.n {
			t.Fatalf("levenshtein(%q, %q) returned %d, want %d", tt.s, tt.t, n, tt.n)
		}
	}
}
