package dcp001

import (
	"fmt"
	"math/rand"
	"strconv"
	"testing"
)

func TestAnyPairSumTo(t *testing.T) {
	var tests = []struct {
		a []int
		k int
		b bool
	}{
		{[]int{10, 15, 3, 7}, 17, true},
		{nil, 0, false},
		{[]int{}, 0, false},
		{[]int{1}, 1, false},
		{[]int{5, -3, 8, 0}, 8, true},
		{[]int{5, -3, 8, 7}, 5, true},
		{[]int{5, -4, 8, 7}, 5, false},
	}
	for i, tt := range tests {
		t.Run(strconv.Itoa(i), func(t *testing.T) {
			if b := anyPairSumToMap(tt.a, tt.k); b != tt.b {
				t.Fatalf("anyPairSumToMap returned %v, want %v", b, tt.b)
			}
			if b := anyPairSumToNestedLoops(tt.a, tt.k); b != tt.b {
				t.Fatalf("anyPairSumToNestedLoops returned %v, want %v", b, tt.b)
			}
		})
	}
}

func BenchmarkAnyPairSumTo(b *testing.B) {
	aa := make([][]int, 8)
	for i := 0; i < len(aa); i += 2 {
		aa[i] = randInts(pow2(2 * (i + 1)))
	}
	k := randInt()
	n := 0
	for _, a := range aa {
		b.Run(fmt.Sprintf("anyPairSumToMap(rand %d)", len(a)), func(b *testing.B) {
			for i := 0; i < b.N; i++ {
				if anyPairSumToMap(a, k) {
					n++
				}
			}
		})
		b.Run(fmt.Sprintf("anyPairSumToNestedLoops(rand %d)", len(a)), func(b *testing.B) {
			for i := 0; i < b.N; i++ {
				if anyPairSumToNestedLoops(a, k) {
					n++
				}
			}
		})
	}
}

// Returns a random integer in the range [-50, 50].
func randInt() int {
	return rand.Intn(101) - 50
}

// Returns n values generated by randInt().
func randInts(n int) []int {
	a := make([]int, n)
	for i := 0; i < n; i++ {
		a[i] = randInt()
	}
	return a
}

// Returns 2**n.
func pow2(n int) int {
	x := 1
	for i := 0; i < n; i++ {
		x *= 2
	}
	return x
}
