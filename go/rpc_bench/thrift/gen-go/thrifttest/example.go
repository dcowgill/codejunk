// Autogenerated by Thrift Compiler (0.10.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package thrifttest

import (
	"bytes"
	"database/sql/driver"
	"errors"
	"fmt"

	"git.apache.org/thrift.git/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

type OrderType int64

const (
	OrderType_DELIVERY   OrderType = 1
	OrderType_PICKUP     OrderType = 2
	OrderType_REDELIVERY OrderType = 3
)

func (p OrderType) String() string {
	switch p {
	case OrderType_DELIVERY:
		return "DELIVERY"
	case OrderType_PICKUP:
		return "PICKUP"
	case OrderType_REDELIVERY:
		return "REDELIVERY"
	}
	return "<UNSET>"
}

func OrderTypeFromString(s string) (OrderType, error) {
	switch s {
	case "DELIVERY":
		return OrderType_DELIVERY, nil
	case "PICKUP":
		return OrderType_PICKUP, nil
	case "REDELIVERY":
		return OrderType_REDELIVERY, nil
	}
	return OrderType(0), fmt.Errorf("not a valid OrderType string")
}

func OrderTypePtr(v OrderType) *OrderType { return &v }

func (p OrderType) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *OrderType) UnmarshalText(text []byte) error {
	q, err := OrderTypeFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

func (p *OrderType) Scan(value interface{}) error {
	v, ok := value.(int64)
	if !ok {
		return errors.New("Scan value is not int64")
	}
	*p = OrderType(v)
	return nil
}

func (p *OrderType) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type OrderStatus int64

const (
	OrderStatus_PENDING               OrderStatus = 1
	OrderStatus_AUTHORIZED            OrderStatus = 2
	OrderStatus_NEW                   OrderStatus = 3
	OrderStatus_REJECTED              OrderStatus = 4
	OrderStatus_ACCEPTED              OrderStatus = 5
	OrderStatus_CONFIRMED             OrderStatus = 6
	OrderStatus_ALMOST_READY          OrderStatus = 7
	OrderStatus_READY                 OrderStatus = 8
	OrderStatus_IN_TRANSIT            OrderStatus = 9
	OrderStatus_DELIVERED             OrderStatus = 10
	OrderStatus_PICKED_UP_BY_CUSTOMER OrderStatus = 11
	OrderStatus_COULD_NOT_DELIVER     OrderStatus = 12
	OrderStatus_CANCELED              OrderStatus = 13
	OrderStatus_FAILED                OrderStatus = 14
	OrderStatus_ABANDONED             OrderStatus = 15
)

func (p OrderStatus) String() string {
	switch p {
	case OrderStatus_PENDING:
		return "PENDING"
	case OrderStatus_AUTHORIZED:
		return "AUTHORIZED"
	case OrderStatus_NEW:
		return "NEW"
	case OrderStatus_REJECTED:
		return "REJECTED"
	case OrderStatus_ACCEPTED:
		return "ACCEPTED"
	case OrderStatus_CONFIRMED:
		return "CONFIRMED"
	case OrderStatus_ALMOST_READY:
		return "ALMOST_READY"
	case OrderStatus_READY:
		return "READY"
	case OrderStatus_IN_TRANSIT:
		return "IN_TRANSIT"
	case OrderStatus_DELIVERED:
		return "DELIVERED"
	case OrderStatus_PICKED_UP_BY_CUSTOMER:
		return "PICKED_UP_BY_CUSTOMER"
	case OrderStatus_COULD_NOT_DELIVER:
		return "COULD_NOT_DELIVER"
	case OrderStatus_CANCELED:
		return "CANCELED"
	case OrderStatus_FAILED:
		return "FAILED"
	case OrderStatus_ABANDONED:
		return "ABANDONED"
	}
	return "<UNSET>"
}

func OrderStatusFromString(s string) (OrderStatus, error) {
	switch s {
	case "PENDING":
		return OrderStatus_PENDING, nil
	case "AUTHORIZED":
		return OrderStatus_AUTHORIZED, nil
	case "NEW":
		return OrderStatus_NEW, nil
	case "REJECTED":
		return OrderStatus_REJECTED, nil
	case "ACCEPTED":
		return OrderStatus_ACCEPTED, nil
	case "CONFIRMED":
		return OrderStatus_CONFIRMED, nil
	case "ALMOST_READY":
		return OrderStatus_ALMOST_READY, nil
	case "READY":
		return OrderStatus_READY, nil
	case "IN_TRANSIT":
		return OrderStatus_IN_TRANSIT, nil
	case "DELIVERED":
		return OrderStatus_DELIVERED, nil
	case "PICKED_UP_BY_CUSTOMER":
		return OrderStatus_PICKED_UP_BY_CUSTOMER, nil
	case "COULD_NOT_DELIVER":
		return OrderStatus_COULD_NOT_DELIVER, nil
	case "CANCELED":
		return OrderStatus_CANCELED, nil
	case "FAILED":
		return OrderStatus_FAILED, nil
	case "ABANDONED":
		return OrderStatus_ABANDONED, nil
	}
	return OrderStatus(0), fmt.Errorf("not a valid OrderStatus string")
}

func OrderStatusPtr(v OrderStatus) *OrderStatus { return &v }

func (p OrderStatus) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *OrderStatus) UnmarshalText(text []byte) error {
	q, err := OrderStatusFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

func (p *OrderStatus) Scan(value interface{}) error {
	v, ok := value.(int64)
	if !ok {
		return errors.New("Scan value is not int64")
	}
	*p = OrderStatus(v)
	return nil
}

func (p *OrderStatus) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

// Attributes:
//  - ID
//  - RestaurantID
//  - UserID
//  - OrderType
//  - Status
//  - AddressID
//  - EstimatedPrepTime
//  - OrderTargetDate
//  - CreatedAt
//  - AcknowledgedAt
//  - AlmostReadyAt
//  - ReadyAt
//  - DeliveredAt
//  - Subtotal
//  - DeliveryFee
//  - Tip
//  - Tax
//  - CardFee
//  - Total
//  - SubmittedAt
//  - AdjustedSubtotal
//  - ZoneID
//  - CompletionTarget
//  - ConfirmedAt
//  - EstimatedTravelTime
//  - UpdatedAt
//  - PaymentTokenID
//  - DriversNeeded
//  - EstimatedLoadingTime
//  - TargetConfirmedBy
//  - TargetSendDriverAt
//  - TargetReadyAt
//  - TargetDeliveredAt
//  - ProjectCode
//  - CorporateGroupID
//  - ManualAssignment
//  - ContainsAlcohol
//  - Fee
//  - Surcharge
//  - EstimatedDistance
//  - EstimatedRawTravelTime
type Order struct {
	ID           int64       `thrift:"id,1" db:"id" json:"id"`
	RestaurantID int64       `thrift:"restaurant_id,2" db:"restaurant_id" json:"restaurant_id"`
	UserID       int64       `thrift:"user_id,3" db:"user_id" json:"user_id"`
	OrderType    OrderType   `thrift:"order_type,4" db:"order_type" json:"order_type"`
	Status       OrderStatus `thrift:"status,5" db:"status" json:"status"`
	// unused field # 6
	AddressID         int64  `thrift:"address_id,7" db:"address_id" json:"address_id"`
	EstimatedPrepTime int16  `thrift:"estimated_prep_time,8" db:"estimated_prep_time" json:"estimated_prep_time"`
	OrderTargetDate   string `thrift:"order_target_date,9" db:"order_target_date" json:"order_target_date"`
	CreatedAt         string `thrift:"created_at,10" db:"created_at" json:"created_at"`
	AcknowledgedAt    string `thrift:"acknowledged_at,11" db:"acknowledged_at" json:"acknowledged_at"`
	AlmostReadyAt     string `thrift:"almost_ready_at,12" db:"almost_ready_at" json:"almost_ready_at"`
	ReadyAt           string `thrift:"ready_at,13" db:"ready_at" json:"ready_at"`
	DeliveredAt       string `thrift:"delivered_at,14" db:"delivered_at" json:"delivered_at"`
	Subtotal          int64  `thrift:"subtotal,15" db:"subtotal" json:"subtotal"`
	DeliveryFee       int64  `thrift:"delivery_fee,16" db:"delivery_fee" json:"delivery_fee"`
	Tip               int64  `thrift:"tip,17" db:"tip" json:"tip"`
	Tax               int64  `thrift:"tax,18" db:"tax" json:"tax"`
	CardFee           int64  `thrift:"card_fee,19" db:"card_fee" json:"card_fee"`
	Total             int64  `thrift:"total,20" db:"total" json:"total"`
	SubmittedAt       string `thrift:"submitted_at,21" db:"submitted_at" json:"submitted_at"`
	AdjustedSubtotal  int64  `thrift:"adjusted_subtotal,22" db:"adjusted_subtotal" json:"adjusted_subtotal"`
	ZoneID            int64  `thrift:"zone_id,23" db:"zone_id" json:"zone_id"`
	// unused field # 24
	CompletionTarget       string  `thrift:"completion_target,25" db:"completion_target" json:"completion_target"`
	ConfirmedAt            string  `thrift:"confirmed_at,26" db:"confirmed_at" json:"confirmed_at"`
	EstimatedTravelTime    int64   `thrift:"estimated_travel_time,27" db:"estimated_travel_time" json:"estimated_travel_time"`
	UpdatedAt              string  `thrift:"updated_at,28" db:"updated_at" json:"updated_at"`
	PaymentTokenID         int64   `thrift:"payment_token_id,29" db:"payment_token_id" json:"payment_token_id"`
	DriversNeeded          int16   `thrift:"drivers_needed,30" db:"drivers_needed" json:"drivers_needed"`
	EstimatedLoadingTime   int16   `thrift:"estimated_loading_time,31" db:"estimated_loading_time" json:"estimated_loading_time"`
	TargetConfirmedBy      string  `thrift:"target_confirmed_by,32" db:"target_confirmed_by" json:"target_confirmed_by"`
	TargetSendDriverAt     string  `thrift:"target_send_driver_at,33" db:"target_send_driver_at" json:"target_send_driver_at"`
	TargetReadyAt          string  `thrift:"target_ready_at,34" db:"target_ready_at" json:"target_ready_at"`
	TargetDeliveredAt      string  `thrift:"target_delivered_at,35" db:"target_delivered_at" json:"target_delivered_at"`
	ProjectCode            string  `thrift:"project_code,36" db:"project_code" json:"project_code"`
	CorporateGroupID       int64   `thrift:"corporate_group_id,37" db:"corporate_group_id" json:"corporate_group_id"`
	ManualAssignment       bool    `thrift:"manual_assignment,38" db:"manual_assignment" json:"manual_assignment"`
	ContainsAlcohol        bool    `thrift:"contains_alcohol,39" db:"contains_alcohol" json:"contains_alcohol"`
	Fee                    int64   `thrift:"fee,40" db:"fee" json:"fee"`
	Surcharge              int64   `thrift:"surcharge,41" db:"surcharge" json:"surcharge"`
	EstimatedDistance      float64 `thrift:"estimated_distance,42" db:"estimated_distance" json:"estimated_distance"`
	EstimatedRawTravelTime float64 `thrift:"estimated_raw_travel_time,43" db:"estimated_raw_travel_time" json:"estimated_raw_travel_time"`
}

func NewOrder() *Order {
	return &Order{}
}

func (p *Order) GetID() int64 {
	return p.ID
}

func (p *Order) GetRestaurantID() int64 {
	return p.RestaurantID
}

func (p *Order) GetUserID() int64 {
	return p.UserID
}

func (p *Order) GetOrderType() OrderType {
	return p.OrderType
}

func (p *Order) GetStatus() OrderStatus {
	return p.Status
}

func (p *Order) GetAddressID() int64 {
	return p.AddressID
}

func (p *Order) GetEstimatedPrepTime() int16 {
	return p.EstimatedPrepTime
}

func (p *Order) GetOrderTargetDate() string {
	return p.OrderTargetDate
}

func (p *Order) GetCreatedAt() string {
	return p.CreatedAt
}

func (p *Order) GetAcknowledgedAt() string {
	return p.AcknowledgedAt
}

func (p *Order) GetAlmostReadyAt() string {
	return p.AlmostReadyAt
}

func (p *Order) GetReadyAt() string {
	return p.ReadyAt
}

func (p *Order) GetDeliveredAt() string {
	return p.DeliveredAt
}

func (p *Order) GetSubtotal() int64 {
	return p.Subtotal
}

func (p *Order) GetDeliveryFee() int64 {
	return p.DeliveryFee
}

func (p *Order) GetTip() int64 {
	return p.Tip
}

func (p *Order) GetTax() int64 {
	return p.Tax
}

func (p *Order) GetCardFee() int64 {
	return p.CardFee
}

func (p *Order) GetTotal() int64 {
	return p.Total
}

func (p *Order) GetSubmittedAt() string {
	return p.SubmittedAt
}

func (p *Order) GetAdjustedSubtotal() int64 {
	return p.AdjustedSubtotal
}

func (p *Order) GetZoneID() int64 {
	return p.ZoneID
}

func (p *Order) GetCompletionTarget() string {
	return p.CompletionTarget
}

func (p *Order) GetConfirmedAt() string {
	return p.ConfirmedAt
}

func (p *Order) GetEstimatedTravelTime() int64 {
	return p.EstimatedTravelTime
}

func (p *Order) GetUpdatedAt() string {
	return p.UpdatedAt
}

func (p *Order) GetPaymentTokenID() int64 {
	return p.PaymentTokenID
}

func (p *Order) GetDriversNeeded() int16 {
	return p.DriversNeeded
}

func (p *Order) GetEstimatedLoadingTime() int16 {
	return p.EstimatedLoadingTime
}

func (p *Order) GetTargetConfirmedBy() string {
	return p.TargetConfirmedBy
}

func (p *Order) GetTargetSendDriverAt() string {
	return p.TargetSendDriverAt
}

func (p *Order) GetTargetReadyAt() string {
	return p.TargetReadyAt
}

func (p *Order) GetTargetDeliveredAt() string {
	return p.TargetDeliveredAt
}

func (p *Order) GetProjectCode() string {
	return p.ProjectCode
}

func (p *Order) GetCorporateGroupID() int64 {
	return p.CorporateGroupID
}

func (p *Order) GetManualAssignment() bool {
	return p.ManualAssignment
}

func (p *Order) GetContainsAlcohol() bool {
	return p.ContainsAlcohol
}

func (p *Order) GetFee() int64 {
	return p.Fee
}

func (p *Order) GetSurcharge() int64 {
	return p.Surcharge
}

func (p *Order) GetEstimatedDistance() float64 {
	return p.EstimatedDistance
}

func (p *Order) GetEstimatedRawTravelTime() float64 {
	return p.EstimatedRawTravelTime
}
func (p *Order) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.ReadField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.ReadField8(iprot); err != nil {
				return err
			}
		case 9:
			if err := p.ReadField9(iprot); err != nil {
				return err
			}
		case 10:
			if err := p.ReadField10(iprot); err != nil {
				return err
			}
		case 11:
			if err := p.ReadField11(iprot); err != nil {
				return err
			}
		case 12:
			if err := p.ReadField12(iprot); err != nil {
				return err
			}
		case 13:
			if err := p.ReadField13(iprot); err != nil {
				return err
			}
		case 14:
			if err := p.ReadField14(iprot); err != nil {
				return err
			}
		case 15:
			if err := p.ReadField15(iprot); err != nil {
				return err
			}
		case 16:
			if err := p.ReadField16(iprot); err != nil {
				return err
			}
		case 17:
			if err := p.ReadField17(iprot); err != nil {
				return err
			}
		case 18:
			if err := p.ReadField18(iprot); err != nil {
				return err
			}
		case 19:
			if err := p.ReadField19(iprot); err != nil {
				return err
			}
		case 20:
			if err := p.ReadField20(iprot); err != nil {
				return err
			}
		case 21:
			if err := p.ReadField21(iprot); err != nil {
				return err
			}
		case 22:
			if err := p.ReadField22(iprot); err != nil {
				return err
			}
		case 23:
			if err := p.ReadField23(iprot); err != nil {
				return err
			}
		case 25:
			if err := p.ReadField25(iprot); err != nil {
				return err
			}
		case 26:
			if err := p.ReadField26(iprot); err != nil {
				return err
			}
		case 27:
			if err := p.ReadField27(iprot); err != nil {
				return err
			}
		case 28:
			if err := p.ReadField28(iprot); err != nil {
				return err
			}
		case 29:
			if err := p.ReadField29(iprot); err != nil {
				return err
			}
		case 30:
			if err := p.ReadField30(iprot); err != nil {
				return err
			}
		case 31:
			if err := p.ReadField31(iprot); err != nil {
				return err
			}
		case 32:
			if err := p.ReadField32(iprot); err != nil {
				return err
			}
		case 33:
			if err := p.ReadField33(iprot); err != nil {
				return err
			}
		case 34:
			if err := p.ReadField34(iprot); err != nil {
				return err
			}
		case 35:
			if err := p.ReadField35(iprot); err != nil {
				return err
			}
		case 36:
			if err := p.ReadField36(iprot); err != nil {
				return err
			}
		case 37:
			if err := p.ReadField37(iprot); err != nil {
				return err
			}
		case 38:
			if err := p.ReadField38(iprot); err != nil {
				return err
			}
		case 39:
			if err := p.ReadField39(iprot); err != nil {
				return err
			}
		case 40:
			if err := p.ReadField40(iprot); err != nil {
				return err
			}
		case 41:
			if err := p.ReadField41(iprot); err != nil {
				return err
			}
		case 42:
			if err := p.ReadField42(iprot); err != nil {
				return err
			}
		case 43:
			if err := p.ReadField43(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *Order) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ID = v
	}
	return nil
}

func (p *Order) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.RestaurantID = v
	}
	return nil
}

func (p *Order) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.UserID = v
	}
	return nil
}

func (p *Order) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		temp := OrderType(v)
		p.OrderType = temp
	}
	return nil
}

func (p *Order) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		temp := OrderStatus(v)
		p.Status = temp
	}
	return nil
}

func (p *Order) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		p.AddressID = v
	}
	return nil
}

func (p *Order) ReadField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI16(); err != nil {
		return thrift.PrependError("error reading field 8: ", err)
	} else {
		p.EstimatedPrepTime = v
	}
	return nil
}

func (p *Order) ReadField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 9: ", err)
	} else {
		p.OrderTargetDate = v
	}
	return nil
}

func (p *Order) ReadField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 10: ", err)
	} else {
		p.CreatedAt = v
	}
	return nil
}

func (p *Order) ReadField11(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 11: ", err)
	} else {
		p.AcknowledgedAt = v
	}
	return nil
}

func (p *Order) ReadField12(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 12: ", err)
	} else {
		p.AlmostReadyAt = v
	}
	return nil
}

func (p *Order) ReadField13(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 13: ", err)
	} else {
		p.ReadyAt = v
	}
	return nil
}

func (p *Order) ReadField14(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 14: ", err)
	} else {
		p.DeliveredAt = v
	}
	return nil
}

func (p *Order) ReadField15(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 15: ", err)
	} else {
		p.Subtotal = v
	}
	return nil
}

func (p *Order) ReadField16(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 16: ", err)
	} else {
		p.DeliveryFee = v
	}
	return nil
}

func (p *Order) ReadField17(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 17: ", err)
	} else {
		p.Tip = v
	}
	return nil
}

func (p *Order) ReadField18(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 18: ", err)
	} else {
		p.Tax = v
	}
	return nil
}

func (p *Order) ReadField19(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 19: ", err)
	} else {
		p.CardFee = v
	}
	return nil
}

func (p *Order) ReadField20(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 20: ", err)
	} else {
		p.Total = v
	}
	return nil
}

func (p *Order) ReadField21(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 21: ", err)
	} else {
		p.SubmittedAt = v
	}
	return nil
}

func (p *Order) ReadField22(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 22: ", err)
	} else {
		p.AdjustedSubtotal = v
	}
	return nil
}

func (p *Order) ReadField23(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 23: ", err)
	} else {
		p.ZoneID = v
	}
	return nil
}

func (p *Order) ReadField25(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 25: ", err)
	} else {
		p.CompletionTarget = v
	}
	return nil
}

func (p *Order) ReadField26(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 26: ", err)
	} else {
		p.ConfirmedAt = v
	}
	return nil
}

func (p *Order) ReadField27(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 27: ", err)
	} else {
		p.EstimatedTravelTime = v
	}
	return nil
}

func (p *Order) ReadField28(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 28: ", err)
	} else {
		p.UpdatedAt = v
	}
	return nil
}

func (p *Order) ReadField29(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 29: ", err)
	} else {
		p.PaymentTokenID = v
	}
	return nil
}

func (p *Order) ReadField30(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI16(); err != nil {
		return thrift.PrependError("error reading field 30: ", err)
	} else {
		p.DriversNeeded = v
	}
	return nil
}

func (p *Order) ReadField31(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI16(); err != nil {
		return thrift.PrependError("error reading field 31: ", err)
	} else {
		p.EstimatedLoadingTime = v
	}
	return nil
}

func (p *Order) ReadField32(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 32: ", err)
	} else {
		p.TargetConfirmedBy = v
	}
	return nil
}

func (p *Order) ReadField33(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 33: ", err)
	} else {
		p.TargetSendDriverAt = v
	}
	return nil
}

func (p *Order) ReadField34(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 34: ", err)
	} else {
		p.TargetReadyAt = v
	}
	return nil
}

func (p *Order) ReadField35(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 35: ", err)
	} else {
		p.TargetDeliveredAt = v
	}
	return nil
}

func (p *Order) ReadField36(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 36: ", err)
	} else {
		p.ProjectCode = v
	}
	return nil
}

func (p *Order) ReadField37(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 37: ", err)
	} else {
		p.CorporateGroupID = v
	}
	return nil
}

func (p *Order) ReadField38(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 38: ", err)
	} else {
		p.ManualAssignment = v
	}
	return nil
}

func (p *Order) ReadField39(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 39: ", err)
	} else {
		p.ContainsAlcohol = v
	}
	return nil
}

func (p *Order) ReadField40(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 40: ", err)
	} else {
		p.Fee = v
	}
	return nil
}

func (p *Order) ReadField41(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 41: ", err)
	} else {
		p.Surcharge = v
	}
	return nil
}

func (p *Order) ReadField42(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return thrift.PrependError("error reading field 42: ", err)
	} else {
		p.EstimatedDistance = v
	}
	return nil
}

func (p *Order) ReadField43(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return thrift.PrependError("error reading field 43: ", err)
	} else {
		p.EstimatedRawTravelTime = v
	}
	return nil
}

func (p *Order) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Order"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
		if err := p.writeField5(oprot); err != nil {
			return err
		}
		if err := p.writeField7(oprot); err != nil {
			return err
		}
		if err := p.writeField8(oprot); err != nil {
			return err
		}
		if err := p.writeField9(oprot); err != nil {
			return err
		}
		if err := p.writeField10(oprot); err != nil {
			return err
		}
		if err := p.writeField11(oprot); err != nil {
			return err
		}
		if err := p.writeField12(oprot); err != nil {
			return err
		}
		if err := p.writeField13(oprot); err != nil {
			return err
		}
		if err := p.writeField14(oprot); err != nil {
			return err
		}
		if err := p.writeField15(oprot); err != nil {
			return err
		}
		if err := p.writeField16(oprot); err != nil {
			return err
		}
		if err := p.writeField17(oprot); err != nil {
			return err
		}
		if err := p.writeField18(oprot); err != nil {
			return err
		}
		if err := p.writeField19(oprot); err != nil {
			return err
		}
		if err := p.writeField20(oprot); err != nil {
			return err
		}
		if err := p.writeField21(oprot); err != nil {
			return err
		}
		if err := p.writeField22(oprot); err != nil {
			return err
		}
		if err := p.writeField23(oprot); err != nil {
			return err
		}
		if err := p.writeField25(oprot); err != nil {
			return err
		}
		if err := p.writeField26(oprot); err != nil {
			return err
		}
		if err := p.writeField27(oprot); err != nil {
			return err
		}
		if err := p.writeField28(oprot); err != nil {
			return err
		}
		if err := p.writeField29(oprot); err != nil {
			return err
		}
		if err := p.writeField30(oprot); err != nil {
			return err
		}
		if err := p.writeField31(oprot); err != nil {
			return err
		}
		if err := p.writeField32(oprot); err != nil {
			return err
		}
		if err := p.writeField33(oprot); err != nil {
			return err
		}
		if err := p.writeField34(oprot); err != nil {
			return err
		}
		if err := p.writeField35(oprot); err != nil {
			return err
		}
		if err := p.writeField36(oprot); err != nil {
			return err
		}
		if err := p.writeField37(oprot); err != nil {
			return err
		}
		if err := p.writeField38(oprot); err != nil {
			return err
		}
		if err := p.writeField39(oprot); err != nil {
			return err
		}
		if err := p.writeField40(oprot); err != nil {
			return err
		}
		if err := p.writeField41(oprot); err != nil {
			return err
		}
		if err := p.writeField42(oprot); err != nil {
			return err
		}
		if err := p.writeField43(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *Order) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("id", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.ID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err)
	}
	return err
}

func (p *Order) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("restaurant_id", thrift.I64, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:restaurant_id: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.RestaurantID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.restaurant_id (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:restaurant_id: ", p), err)
	}
	return err
}

func (p *Order) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("user_id", thrift.I64, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:user_id: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.UserID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.user_id (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:user_id: ", p), err)
	}
	return err
}

func (p *Order) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("order_type", thrift.I32, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:order_type: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.OrderType)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.order_type (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:order_type: ", p), err)
	}
	return err
}

func (p *Order) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("status", thrift.I32, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:status: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Status)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.status (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:status: ", p), err)
	}
	return err
}

func (p *Order) writeField7(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("address_id", thrift.I64, 7); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:address_id: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.AddressID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.address_id (7) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 7:address_id: ", p), err)
	}
	return err
}

func (p *Order) writeField8(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("estimated_prep_time", thrift.I16, 8); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:estimated_prep_time: ", p), err)
	}
	if err := oprot.WriteI16(int16(p.EstimatedPrepTime)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.estimated_prep_time (8) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 8:estimated_prep_time: ", p), err)
	}
	return err
}

func (p *Order) writeField9(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("order_target_date", thrift.STRING, 9); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:order_target_date: ", p), err)
	}
	if err := oprot.WriteString(string(p.OrderTargetDate)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.order_target_date (9) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 9:order_target_date: ", p), err)
	}
	return err
}

func (p *Order) writeField10(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("created_at", thrift.STRING, 10); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:created_at: ", p), err)
	}
	if err := oprot.WriteString(string(p.CreatedAt)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.created_at (10) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 10:created_at: ", p), err)
	}
	return err
}

func (p *Order) writeField11(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("acknowledged_at", thrift.STRING, 11); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:acknowledged_at: ", p), err)
	}
	if err := oprot.WriteString(string(p.AcknowledgedAt)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.acknowledged_at (11) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 11:acknowledged_at: ", p), err)
	}
	return err
}

func (p *Order) writeField12(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("almost_ready_at", thrift.STRING, 12); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:almost_ready_at: ", p), err)
	}
	if err := oprot.WriteString(string(p.AlmostReadyAt)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.almost_ready_at (12) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 12:almost_ready_at: ", p), err)
	}
	return err
}

func (p *Order) writeField13(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ready_at", thrift.STRING, 13); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 13:ready_at: ", p), err)
	}
	if err := oprot.WriteString(string(p.ReadyAt)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.ready_at (13) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 13:ready_at: ", p), err)
	}
	return err
}

func (p *Order) writeField14(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("delivered_at", thrift.STRING, 14); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 14:delivered_at: ", p), err)
	}
	if err := oprot.WriteString(string(p.DeliveredAt)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.delivered_at (14) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 14:delivered_at: ", p), err)
	}
	return err
}

func (p *Order) writeField15(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("subtotal", thrift.I64, 15); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 15:subtotal: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.Subtotal)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.subtotal (15) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 15:subtotal: ", p), err)
	}
	return err
}

func (p *Order) writeField16(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("delivery_fee", thrift.I64, 16); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 16:delivery_fee: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.DeliveryFee)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.delivery_fee (16) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 16:delivery_fee: ", p), err)
	}
	return err
}

func (p *Order) writeField17(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("tip", thrift.I64, 17); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 17:tip: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.Tip)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.tip (17) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 17:tip: ", p), err)
	}
	return err
}

func (p *Order) writeField18(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("tax", thrift.I64, 18); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 18:tax: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.Tax)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.tax (18) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 18:tax: ", p), err)
	}
	return err
}

func (p *Order) writeField19(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("card_fee", thrift.I64, 19); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 19:card_fee: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.CardFee)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.card_fee (19) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 19:card_fee: ", p), err)
	}
	return err
}

func (p *Order) writeField20(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("total", thrift.I64, 20); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 20:total: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.Total)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.total (20) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 20:total: ", p), err)
	}
	return err
}

func (p *Order) writeField21(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("submitted_at", thrift.STRING, 21); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 21:submitted_at: ", p), err)
	}
	if err := oprot.WriteString(string(p.SubmittedAt)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.submitted_at (21) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 21:submitted_at: ", p), err)
	}
	return err
}

func (p *Order) writeField22(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("adjusted_subtotal", thrift.I64, 22); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 22:adjusted_subtotal: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.AdjustedSubtotal)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.adjusted_subtotal (22) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 22:adjusted_subtotal: ", p), err)
	}
	return err
}

func (p *Order) writeField23(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("zone_id", thrift.I64, 23); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 23:zone_id: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.ZoneID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.zone_id (23) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 23:zone_id: ", p), err)
	}
	return err
}

func (p *Order) writeField25(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("completion_target", thrift.STRING, 25); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 25:completion_target: ", p), err)
	}
	if err := oprot.WriteString(string(p.CompletionTarget)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.completion_target (25) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 25:completion_target: ", p), err)
	}
	return err
}

func (p *Order) writeField26(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("confirmed_at", thrift.STRING, 26); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 26:confirmed_at: ", p), err)
	}
	if err := oprot.WriteString(string(p.ConfirmedAt)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.confirmed_at (26) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 26:confirmed_at: ", p), err)
	}
	return err
}

func (p *Order) writeField27(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("estimated_travel_time", thrift.I64, 27); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 27:estimated_travel_time: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.EstimatedTravelTime)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.estimated_travel_time (27) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 27:estimated_travel_time: ", p), err)
	}
	return err
}

func (p *Order) writeField28(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("updated_at", thrift.STRING, 28); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 28:updated_at: ", p), err)
	}
	if err := oprot.WriteString(string(p.UpdatedAt)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.updated_at (28) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 28:updated_at: ", p), err)
	}
	return err
}

func (p *Order) writeField29(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("payment_token_id", thrift.I64, 29); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 29:payment_token_id: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.PaymentTokenID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.payment_token_id (29) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 29:payment_token_id: ", p), err)
	}
	return err
}

func (p *Order) writeField30(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("drivers_needed", thrift.I16, 30); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 30:drivers_needed: ", p), err)
	}
	if err := oprot.WriteI16(int16(p.DriversNeeded)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.drivers_needed (30) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 30:drivers_needed: ", p), err)
	}
	return err
}

func (p *Order) writeField31(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("estimated_loading_time", thrift.I16, 31); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 31:estimated_loading_time: ", p), err)
	}
	if err := oprot.WriteI16(int16(p.EstimatedLoadingTime)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.estimated_loading_time (31) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 31:estimated_loading_time: ", p), err)
	}
	return err
}

func (p *Order) writeField32(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("target_confirmed_by", thrift.STRING, 32); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 32:target_confirmed_by: ", p), err)
	}
	if err := oprot.WriteString(string(p.TargetConfirmedBy)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.target_confirmed_by (32) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 32:target_confirmed_by: ", p), err)
	}
	return err
}

func (p *Order) writeField33(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("target_send_driver_at", thrift.STRING, 33); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 33:target_send_driver_at: ", p), err)
	}
	if err := oprot.WriteString(string(p.TargetSendDriverAt)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.target_send_driver_at (33) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 33:target_send_driver_at: ", p), err)
	}
	return err
}

func (p *Order) writeField34(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("target_ready_at", thrift.STRING, 34); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 34:target_ready_at: ", p), err)
	}
	if err := oprot.WriteString(string(p.TargetReadyAt)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.target_ready_at (34) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 34:target_ready_at: ", p), err)
	}
	return err
}

func (p *Order) writeField35(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("target_delivered_at", thrift.STRING, 35); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 35:target_delivered_at: ", p), err)
	}
	if err := oprot.WriteString(string(p.TargetDeliveredAt)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.target_delivered_at (35) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 35:target_delivered_at: ", p), err)
	}
	return err
}

func (p *Order) writeField36(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("project_code", thrift.STRING, 36); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 36:project_code: ", p), err)
	}
	if err := oprot.WriteString(string(p.ProjectCode)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.project_code (36) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 36:project_code: ", p), err)
	}
	return err
}

func (p *Order) writeField37(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("corporate_group_id", thrift.I64, 37); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 37:corporate_group_id: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.CorporateGroupID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.corporate_group_id (37) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 37:corporate_group_id: ", p), err)
	}
	return err
}

func (p *Order) writeField38(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("manual_assignment", thrift.BOOL, 38); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 38:manual_assignment: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.ManualAssignment)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.manual_assignment (38) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 38:manual_assignment: ", p), err)
	}
	return err
}

func (p *Order) writeField39(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("contains_alcohol", thrift.BOOL, 39); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 39:contains_alcohol: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.ContainsAlcohol)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.contains_alcohol (39) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 39:contains_alcohol: ", p), err)
	}
	return err
}

func (p *Order) writeField40(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("fee", thrift.I64, 40); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 40:fee: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.Fee)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.fee (40) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 40:fee: ", p), err)
	}
	return err
}

func (p *Order) writeField41(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("surcharge", thrift.I64, 41); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 41:surcharge: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.Surcharge)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.surcharge (41) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 41:surcharge: ", p), err)
	}
	return err
}

func (p *Order) writeField42(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("estimated_distance", thrift.DOUBLE, 42); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 42:estimated_distance: ", p), err)
	}
	if err := oprot.WriteDouble(float64(p.EstimatedDistance)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.estimated_distance (42) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 42:estimated_distance: ", p), err)
	}
	return err
}

func (p *Order) writeField43(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("estimated_raw_travel_time", thrift.DOUBLE, 43); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 43:estimated_raw_travel_time: ", p), err)
	}
	if err := oprot.WriteDouble(float64(p.EstimatedRawTravelTime)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.estimated_raw_travel_time (43) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 43:estimated_raw_travel_time: ", p), err)
	}
	return err
}

func (p *Order) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Order(%+v)", *p)
}
